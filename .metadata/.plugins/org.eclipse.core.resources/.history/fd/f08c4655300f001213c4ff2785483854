package hci;

import static java.awt.event.InputEvent.CTRL_DOWN_MASK;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.AbstractAction;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.KeyStroke;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.filechooser.FileFilter;

import hci.utils.Point;


/**
 * Main class of the program - handles display of the main window
 * 
 * @author Michal
 * 
 */
public class ImageLabeller extends JFrame {
	/**
	 * some java stuff to get rid of warnings
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * main window panel
	 */
	JPanel appPanel = null;

	/**
	 * toolbox - put all buttons and stuff here!
	 */
	JPanel toolboxPanel = null;
	
	/* containers to hold and display labels created by the user */
	JDesktopPane desktop =null;
	JInternalFrame  internalFrame=null;
	JPanel LabelPanel = null;
	JPanel optionsPanel =null;
	 
	 /*Table of labels*/
	 Hashtable<String,JLabel> label_lookup= new Hashtable<String,JLabel>();
	/**
	 * image panel - displays image and editing area
	 */
	 ImagePanel imagePanel = null;
	 
	 /* handles the Edit button  and its event corresponding to the  internal frame  */
	 JButton Edit = new JButton("Edit");
	 private boolean edit_clicked = false;
	 
	 /*handles the remove button and its event*/
	 JButton Remove = new JButton("Remove");
	
	 /*create the undo and redo action objects*/
	 UndoAction undo = new UndoAction("Undo","Undo previous step",new Integer(KeyEvent.VK_3));
	 RedoAction redo = new RedoAction("redo","Redo previous step",new Integer(KeyEvent.VK_4));
	
	 
	 /*Create Editor Frame*/
	 JInternalFrame Editor = null;
	 JPanel editPanel=null;
	 JPanel  redo_undo = null;
	 //buttons displayed on the editor panel
	 JButton undo_B = new JButton();
	 JButton redo_B = new JButton();
	 JButton save_B = new JButton("Save");
	 
	 
	 
	 /**
	 * 
	 * 
	 * handles New Object button action
	 */
	public void addNewPolygon(String key) {
		imagePanel.addNewPolygon(key);
	}

	public void paint(Graphics g) {
		super.paint(g);
		imagePanel.paint(g); // update image panel
	}

	/**
	 * sets up application window and the interactive interface
	 * 
	 * @param imageFilename
	 *            image to be loaded for editing
	 * @throws Exception
	 */
	public void setupGUI(String imageFilename) throws Exception {
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent event) {
				// here we exit the program (maybe we should ask if the user
				// really wants to do it?)
			String[] options = {"Yes","No"};
			
			int rep = JOptionPane.showOptionDialog(imagePanel, "Do you really wish to quit?", "Confirm Exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
			if (rep!= JOptionPane.NO_OPTION){
				System.exit(0);
			}
			// asks whether the user really
													// want to exit the app;
			}
		});

		//create the menu bar
		JMenuBar menubar = new JMenuBar();
		
		
		
		
		//file menu
		JMenu filemenu = new JMenu("File");
		filemenu.setOpaque(true);
		filemenu.setMnemonic(KeyEvent.VK_1);
		menubar.add(filemenu);
		
		
		JMenuItem fileItem1 = new JMenuItem("Load New Image");
		JMenuItem fileItem2 = new JMenuItem("Open Existing Project");
		JMenuItem fileItem3 = new JMenuItem("Save Project");
		JMenuItem fileItem4 = new JMenuItem("Close");
		//fileItem2.add(new JSeparator());
		//fileItem4.add(new JSeparator());
		filemenu.add(fileItem1);
		filemenu.add(new JSeparator());
		filemenu.add(fileItem2);
		filemenu.add(fileItem3);
		filemenu.add(new JSeparator());
		filemenu.add(fileItem4);
		fileItem1.setAccelerator(KeyStroke.getKeyStroke('I', CTRL_DOWN_MASK));
		fileItem2.setAccelerator(KeyStroke.getKeyStroke('O', CTRL_DOWN_MASK));
		fileItem3.setAccelerator(KeyStroke.getKeyStroke('S', CTRL_DOWN_MASK));
		fileItem4.setAccelerator(KeyStroke.getKeyStroke('Q', CTRL_DOWN_MASK));
		
		
		//edit menu
		JMenu editmenu = new JMenu("Edit");
		editmenu.setMnemonic(KeyEvent.VK_2);
		menubar.add(editmenu);
		
		
		JMenuItem editItem1 = new JMenuItem();
		editItem1.setAction(undo);
		JMenuItem editItem2 = new JMenuItem();
		editItem2.setAction(redo);
		//JMenuItem editItem3 = new JMenuItem("Preferences");
		
		
		editmenu.add(editItem1);
		editmenu.add(editItem2);
		editmenu.add(new JSeparator());
		//editmenu.add(editItem3);
		
		//add menubar to frame
		setJMenuBar(menubar);
		
		
		//create the action listeners for the menu items
		
		//open file
		fileItem1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				CustomFileFilter filter = new CustomFileFilter("Images(.jpg, .png)");
				filter.addExtension("jpg");
				filter.addExtension("png");
				
			    chooser.setFileFilter(filter);
				int rVal = chooser.showOpenDialog(imagePanel);
				if(rVal == JFileChooser.APPROVE_OPTION) {
					try {
						imagePanel.changePicture(chooser.getSelectedFile().getAbsolutePath());
			            LabelPanel.removeAll();
			            internalFrame.setVisible(false);
			            internalFrame.revalidate();
			            internalFrame.repaint();
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
						JOptionPane.showMessageDialog(null,
								"The file you selected cannot be opened",
								"Error opening file",
								JOptionPane.ERROR_MESSAGE);
					}
				}
			}
		});
		
		//open project
		fileItem2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				CustomFileFilter filter = new CustomFileFilter("HCI projects (.ser)");
				filter.addExtension("ser");
			    chooser.setFileFilter(filter);
				int rVal = chooser.showOpenDialog(imagePanel);
				if(rVal == JFileChooser.APPROVE_OPTION) {
					try
			         {
			            FileInputStream fileIn =
			                          new FileInputStream(chooser.getSelectedFile());
			            ObjectInputStream in = new ObjectInputStream(fileIn);
			            imagePanel.loadProject((SerializableImage) in.readObject(), (Hashtable<String, ArrayList<Point>>) in.readObject(), (ArrayList<Point>) in.readObject());
			            in.close();
			            fileIn.close();
			            
			            //remove everything in the label panel
			            LabelPanel.removeAll();
			            
			            //put the new JLabels
			            Enumeration en = imagePanel.getPolygonTable().keys();
			    		while(en.hasMoreElements()){
			    			
			    			String label = (String) en.nextElement();
			            	label_lookup.put(label, new JLabel(label) );
			            	((JLabel) label_lookup.get(label)).setForeground(Color.red);
			            	LabelPanel.add((JLabel) label_lookup.get(label));
			            	((JLabel) label_lookup.get(label)).addMouseListener(new MouseListener(){

								public void mouseEntered(MouseEvent e) {
									// TODO Auto-generated method stub
									String key = ((JLabel)e.getSource()).getText();
									imagePanel.displayPolygon(key, Color.red);
								}

								public void mouseExited(MouseEvent e2) {
									// TODO Auto-generated method stub
									String key = ((JLabel)e2.getSource()).getText();
									imagePanel.displayPolygon(key, Color.GREEN);
								}
								
								public void mouseClicked(MouseEvent arg0) {
								}
								public void mousePressed(MouseEvent arg0) {
								}
								public void mouseReleased(MouseEvent arg0) {
								}
					    	});
			            	visiualizeLabelFrame();
			            	
			            }
			            
			        }catch(IOException ee) {
			            ee.printStackTrace();
			            return;
			        }catch(ClassNotFoundException c) {
			            System.out.println("The project cannot be opened");
			            c.printStackTrace();
			            return;
			        } catch (Exception e2) {
						e2.printStackTrace();
					}
				}
			}
		});
		
		//save
		fileItem3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooser = new JFileChooser();
				CustomFileFilter filter = new CustomFileFilter("HCI projects (.ser)");
				filter.addExtension("ser");
			    chooser.setFileFilter(filter);
				int rVal = chooser.showSaveDialog(imagePanel);
				if(rVal == JFileChooser.APPROVE_OPTION) {
					try
				      {
						 File selectedFile = chooser.getSelectedFile();
						 if (!getExtension(selectedFile.getName()).equals("ser")) {
							 String filename;
							 if (selectedFile.getAbsolutePath().contains(".")){
								  filename= selectedFile.getAbsolutePath().substring(0, selectedFile.getAbsolutePath().indexOf(".")); 
							 }
							 else {
								  filename = selectedFile.getAbsolutePath();
							 }
							 selectedFile = new File(filename.concat(".ser"));
						 }
				         FileOutputStream fileOut = new FileOutputStream(selectedFile);
				         ObjectOutputStream out = new ObjectOutputStream(fileOut);
				         out.writeObject(imagePanel.getSerializableImage());
				         out.writeObject(imagePanel.getPolygonTable());
				         out.writeObject(imagePanel.getCurrentPolygon());
				         out.close();
				         fileOut.close();
				      }catch(IOException i)
				      {
				          i.printStackTrace();
				      }
				}
			}
		});

		//close
		fileItem4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CloseApp_query.closeapp_query();
			}
		});
		
	
		// setup main window panel
		appPanel = new JPanel();
		this.setLayout(new BoxLayout(appPanel, BoxLayout.X_AXIS));
		this.setContentPane(appPanel);// this hold the images, image labels and
									// the buttons
	
		
		// Create and set up the image panel.
		imagePanel = new ImagePanel(imageFilename);
		imagePanel.setOpaque(true); //content panes must be opaque
		
        appPanel.add(imagePanel);

        //create toolbox panel
        toolboxPanel = new JPanel();
        toolboxPanel.setLayout(new BoxLayout(toolboxPanel, BoxLayout.Y_AXIS));
        
        ///create destopPane to the frame that displays list of labels
        desktop =new JDesktopPane();
        desktop.setOpaque(false);
        desktop.setLayout(new BoxLayout(desktop, BoxLayout.Y_AXIS));
        toolboxPanel.add(desktop);
        
        //create internal frame to hold the list of labels
        internalFrame = new JInternalFrame("List of Labels", true,true,true);
        int loc_x = desktop.getLocation().x;
        int loc_y = desktop.getLocation().y;
        internalFrame.setBounds(loc_x, loc_y, 200, 100);
       
        
        LabelPanel = new JPanel();// this ensures the new labels are stacked vertically.
        LabelPanel.setLayout(new BoxLayout(LabelPanel,BoxLayout.Y_AXIS));
        JScrollPane scroller = new JScrollPane(LabelPanel);
        scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        
        internalFrame.getContentPane().add(scroller);
       
        
        optionsPanel = new JPanel();//this contains the edit and remove buttons
        optionsPanel.setLayout(new BoxLayout(optionsPanel, BoxLayout.X_AXIS));
        internalFrame.getContentPane().add(optionsPanel,BorderLayout.SOUTH);
        
        desktop.add(internalFrame);

        //add listener to the edit button
        Edit.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent e) {
				edit_clicked=true;	
			}
        	
        });
        ///create the editorframe
        Editor= new JInternalFrame("Editor", true,true,true);
       // Editor.setBounds(internalFrame.getWidth()+desktop.getLocation().x+10, internalFrame.getHeight()+desktop.getLocation().y +10,200,100);
        editPanel= new JPanel();
        editPanel.setLayout(new BoxLayout(editPanel,BoxLayout.Y_AXIS));
        Editor.getContentPane().add(editPanel);
        redo_undo = new JPanel();
        redo_undo.setLayout(new BoxLayout(redo_undo, BoxLayout.Y_AXIS));
        redo_undo.add(undo_B);
        redo_undo.add(redo_B);
        redo_undo.add(save_B);
        Editor.getContentPane().add(redo_undo,BorderLayout.EAST);
        
        desktop.add(Editor);
        
       
        
        
        
        
        
        //Add button to the toolbox
		JButton newPolyButton = new JButton("Create new object");
		newPolyButton.setMnemonic(KeyEvent.VK_N);
		newPolyButton.setSize(50, 20);
		newPolyButton.setEnabled(true);
		newPolyButton.addActionListener(new ActionListener() {
			// @Override
			public void actionPerformed(ActionEvent e) {

				/*if the create button was pressed before the finish button , the existing polygon is removed */
				    if (imagePanel.get_currentPolygon()!=null){
				    	
				    	imagePanel.repaint();
				    	
				    }
				    
				if (imagePanel.getMouseListeners().length ==0){ 

					imagePanel.addMouseListener(imagePanel);

				}

				imagePanel.createPolygon();
			}
		});
		newPolyButton.setToolTipText("Click to add new object");
		toolboxPanel.add(newPolyButton);

		JButton closeButton = new JButton("Finish");
		closeButton.setMnemonic(KeyEvent.VK_N);
		closeButton.setSize(50, 20);
		closeButton.setEnabled(true);
		closeButton.addActionListener(new ActionListener() {
			// @Override
			public void actionPerformed(ActionEvent e) {
			    	
					if (imagePanel.get_currentPolygon()==null){
						return;
					}
			    	// create a dialogue to ask the user for an annotation
			    	JFrame dialogue_frame = new JFrame();
			    	String label_msg = (String) JOptionPane.showInputDialog(dialogue_frame, "Please type in your prefered Label", "Annotator", JOptionPane.OK_OPTION, null, null, null);
			    	if (label_msg==null){
			    		return;
			    	}
			    	addNewPolygon(label_msg);//create new polygon indexed by this string
			    	
			    	
			        label_lookup.put(label_msg,new JLabel(label_msg) );
			        ((JLabel) label_lookup.get(label_msg)).setForeground(Color.red);
			    	LabelPanel.add((JLabel) label_lookup.get(label_msg));
			    	visiualizeLabelFrame();
			    	
			    	internalFrame.revalidate();
			    	internalFrame.repaint();
			    	
			    	((JLabel) label_lookup.get(label_msg)).addMouseListener(new MouseListener(){

						public void mouseClicked(MouseEvent e3) {
							if (edit_clicked){
								JLabel cachelabel = new JLabel(((JLabel)e3.getSource()).getText());
								
								editPanel.add(cachelabel);
								Editor.setOpaque(true);
					    		Editor.setSize(desktop.getWidth(), 200);
					    		imagePanel.setCurrentPolygon(imagePanel.getPolygonTable().get(cachelabel.getText()));
					    		undo_B.setAction(undo);
					    		redo_B.setAction(redo);
					    		
								Editor.setVisible(true);
								
								
							}
							// TODO Auto-generated method stub
							
						}

						public void mouseEntered(MouseEvent e) {
							// TODO Auto-generated method stub
							String key = ((JLabel)e.getSource()).getText();
							imagePanel.displayPolygon(key, Color.red);
							
						}

						public void mouseExited(MouseEvent e2) {
							// TODO Auto-generated method stub
							String key = ((JLabel)e2.getSource()).getText();
							imagePanel.displayPolygon(key, Color.GREEN);
						}

						public void mousePressed(MouseEvent arg0) {
							// TODO Auto-generated method stub
							
						}

						public void mouseReleased(MouseEvent arg0) {
							// TODO Auto-generated method stub
							
						}
			    		
			    	});
			    	
			    	
			}
		});
		closeButton.setToolTipText("click to add new polygon");
		toolboxPanel.add(closeButton);
		
		JButton cancelButton = new JButton("Cancel");
		cancelButton.setMnemonic(KeyEvent.VK_N);
		cancelButton.setSize(50,20);
		cancelButton.setEnabled(true);
		cancelButton.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				  if (imagePanel.get_currentPolygon()!=null){
				    	
				    	imagePanel.repaint();
				    	
				    }
				    
			}
			
		});
		cancelButton.setToolTipText("Remove the current Polygon");
		toolboxPanel.add(cancelButton);
	
	
		//add toolbox to window
		toolboxPanel.setPreferredSize(new Dimension(200,500));
		appPanel.add(toolboxPanel);

		// display all the stuff
		// this.setSize(1100,700);
		this.pack();
		this.setVisible(true);
		System.out.println(this.getSize().getHeight() + " "
				+ this.getSize().getWidth());
		
		
		//add listeners to Edit and Remove methods
		Edit.addActionListener(new ActionListener(){

			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				edit_clicked=true;
			}
			
		});
	}
	

	/**
	 * Runs the program
	 * 
	 * @param argv
	 *            path to an image
	 */
	public static void main(String argv[]) {
		try {
			// create a window and display the image
			ImageLabeller window = new ImageLabeller();
			window.setupGUI(argv[0]);
			window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		} catch (Exception e) {
			System.err.println("Image: " + argv[0]);
			e.printStackTrace();
		}
	}
	
	public String getExtension(String filename) {
		String[] nameParts = filename.split("\\.");
		//file has no extension and is not a folder so refuse it
		if (nameParts.length == 0) return "";
		return nameParts[nameParts.length - 1];
	}
	
	
	
	public void visiualizeLabelFrame() {
		if (!internalFrame.isVisible()){
    		internalFrame.setOpaque(true);
    		internalFrame.setSize(desktop.getWidth(), 200);
    		internalFrame.setVisible(true);
    		optionsPanel.add(Edit);
    		optionsPanel.add(Remove);
    	}
	}
	
	class CustomFileFilter extends FileFilter {
		
		private ArrayList<String> accepted_extensions = new ArrayList<String>();
		private String name;
		
		public boolean accept(File f) {
			if (f.isDirectory()) return true;
			String filename = f.getName();
			String extension = getExtension(filename);
			for (int i=0; i<accepted_extensions.size(); i++) {
				if (extension.equals(accepted_extensions.get(i))) return true;
			}
			return false;
		}
		
		public CustomFileFilter(String name) {
			super();
			this.name = name;
		}

		public String getDescription() {
			return name;
		}
		
		public void addExtension(String ext) {
			accepted_extensions.add(ext);
		}
	}
	
	class UndoAction extends AbstractAction{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public UndoAction(String text, String desc , Integer mnemonic){
			super(text);
			putValue(SHORT_DESCRIPTION,desc);
			putValue(MNEMONIC_KEY, mnemonic);
			
			
		}

		public void actionPerformed(ActionEvent arg0) {
			
			if (imagePanel.get_currentPolygon() != null){
				ArrayList<Point> currentPolygon  = imagePanel.get_currentPolygon();
				currentPolygon.remove(currentPolygon.size()-1);
				imagePanel.paint(imagePanel.getGraphics());
				imagePanel.drawPolygon(currentPolygon,Color.GREEN);
				///imagePanel.setCurrentPolygon(currentPolygon);
				System.out.println( "is the cache and current equal "+ (currentPolygon.size()==imagePanel.currentPolygon_cache.size()) + " the size is "+ currentPolygon.size());
				
			}
			
		}
	}	
		
		class RedoAction extends AbstractAction{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public RedoAction(String text, String desc , Integer mnemonic){
				super(text);
				putValue(SHORT_DESCRIPTION,desc);
				putValue(MNEMONIC_KEY, mnemonic);
				
				
			}

			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				if (imagePanel.get_currentPolygon().size()!= imagePanel.currentPolygon_cache.size()){
					System.out.println("it enters here");
				  ArrayList<Point> currentPolygon  = imagePanel.get_currentPolygon();
				  currentPolygon.add(imagePanel.currentPolygon_cache.get(currentPolygon.size()));
				
				  imagePanel.drawPolygon(currentPolygon, Color.GREEN);
				}
			}
		}
	}

